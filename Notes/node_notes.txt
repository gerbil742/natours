REST API's
- a piece of software that can be used by another piece of software to allow them to talk to each other 
- Representational State Transfer. Way of building apis to make them easy to consume. 
  - separate API into logical 'resources'
  - Expose (make the resources available) structured, 'resource'-based urls
  - use HTTP Methods to crud and not the url
  - send data as JSON
  - Be STATLESS
- REST architecture
  - all the data we want to share in  the api should be divided into logical resource
  - Object or representation of something, which has data assiciated with it. any info that can be named can be a 'resource'. Like tours, users or reviews. these are not 'verbs' tey are names
  - https://www.natours.com/addNewTour is the url. /addNewTour is the endpoint
    - This is a bad endpoint because it violates rule 3 above. Endpoints should only contain teh 'resource' and NOT the actions that can be performed on them. otherwise it will get messy
    - GET  /tours/7    use plural of the resource 
    - POST /tours    server should automatically figure out the id
    - PUT (client sends entire new object to update) of PATCH (client only sends part of object) /tours/7
    - DELETE /tours/7
    - these HTTP mehtods allow us to perform CRUD operations 
    - getToursByUser --> GET /users/3/tours
    - deleteToursByUser  --->  DELETE /users/3/tours/9
- stateless
  - all state is handled on the client. the request must contain ALL the info necessarry to process a certian request. the server should NOT have to remeber previous requests
  - Examples: loggedIn,   currentPage. state refers to a piece of data in the app that might change overtime
  - GET /tours/nextPage  this is bad because the server would need ot know what the current page is in order to send teh currentpage +1. it would have to handel the state server side
    - use GET /tours/page/6 instead


Request Response Cycle & Middleware
- when the express server recieves a request, the express app will then create a request and response object. The server processes the data in order to send back a meaningful response
- Middleware
  - in teh middle of recieving the request and sending the response. in express, essentially everything is a middleware. route functions can be intrepreted as middleware function 
    that only execute for specific routes
  - middleware is basically just a fucntion that can modify the incoming request data. called middleware because it stands between the request and the response
  - The middleware stack: the order thta middleware is executed is teh same as the order they are defined in teh code
  - the req and res objects that are created go through each middleware where they are processed, or some sort of function is called. At the end of each middleware, a next() function 
    is called which calles which executes the next middlewear whigh the same req and res objects.  
  - a request comes in from the client, we get the request and process it with the middlewares and then send it back on teh final middleware (route handler)
- Go to express.com -> resources > middleware to get a list of all the middleware express reccommends. there are things like body-parser listed there
- Flow: 1st, server is set to listen in server.js. a request comes in
  we go in to app.js and it goes down the middleware stack untill it hits the matching route then it gets sent to its corresponding handler
  Then, once in its route it will then execute its corresponding controller 
  finally, the controller will send back a response and end the request/response cycle
- We can create our own middlewares to add to teh middleware stack. if we include a 3rd argument, express knows that we are defining a middleware
  - app.use((req, res, next) => {
      console.log('Hello form the middleware');
      next(); // You need to call next() because otherwise the code wil just be stuck here
    });
  - Using middleware like this is a good way to add some additional into to our request
- You can write param middleware which only runs on a specific endpoint.
  router.param('id', tourController.checkID); 
  This middleware will only run on the /:id endpoint routes like getTour or updateTour
- Its better to define a param middleware to check for a valid id rather than make a function in teh tourController because it bett alligns with the philosophy of express.
  We should always try to work with the middleware stack as much as possible. each of the controllers dont have to worry about validation, they only do one thing.
  It also makes it easier to potentially add another controller that needs to check for an id.


ROUTES
- app.use('/api/v1/users', userRouter); // this is called mounting the handler. mounting a new router (userRouter) on a route (/api/v1/user)
  - here we enable a middlewear function called tourRouter to be used on the specific route /api/v1/tours
    when a request hits the server, it will go down the middleware stack untill it higs this function. if the route matches, it will then call the tourRouter() middleware func above
- we call the callback the route handler
- use v1 in order to specify the api version. you can branch off to v2 and not break the v1 of the api
- you can also have optional route parameters using :id?
- const tourRouter = require('./routes/tourRoutes');
  A router like tourRouter is like a mini applicatoin within our own application. A sub applciation for each resource.
  tourRouter has its own routes. our request will then go into here and find its appropriate route
  if the route from within tourRouter is "/:id" it will hit the id route and it will run one of the handlers.
- in tourRoutes.js We no longer need to specify the full route "/api/v1/tours" because we are using the tourRouter middleware that already specifies that we are on teh "api/v1/tours" route


Refactoring our code
- We created a Controllers folder as well as a server.js file and a routes folder
  - Controllers contains all the handlers for the tour and user routes in a separate file. There is a handler for a specific http method. 
  - its important to keep the logic of the handlers separated form any other operations we want to do on the data, like user auth or data varification. for this we use a custom middleware we define
  - the routers will take the request that is comming down the middleware stack and execute the proper controller for that corresponding http request. 
  - we have a tours and a users route. so if the incoming request has the url for tours, it will enter the tours route (app.use('/api/v1/tours', tourRouter)). The same for the users route



MVC architecture
- Model layer refers to application data and business logic
- Controller layer handle the apps requests interact with models and send back respoonses to the client ( called the applicaton logic)
- View layer for a graphical interface. consists of teh templates we use to generate the view (the website sent back to the client) this is called the presentation logic
- mvc allows for a more modular app, which is good for scaling and easier to maintain
- Application logic vs Business logic
  - App logic is code that is only concerned about the apps implementation, not the underlying business problem were trying to solve (e.g. showing and selling tours). Code that makes the actually app work
    - managing requests and responses. more about technical stuff. a bridge between model and view layers
  - Bis logic Code that actually solves the business problem we set out to solve. Code directly related to how the bis works, what the bis needs, and the bisness rules
    - Creating new tours in the db. checking if user's password is correct, validating user input data. ensuring only users who bought a tour can review it. Code for when people use the product and services
      Cslculating how many weeks are in a tour would be bis logic and belongs in teh model. this is because it has to do with the bis itself and not with responses, handlers, etc.
- Fat models/thin controllers: offload as much logic as possible into the models and keep controllers as simple and lean as possible
- Controller = handler. called controllers in the MVC architecture

Old functions when using the json file foor testing
All these used to be in the tour Controller

Serve static files
- This is how you can serve static files from the browser. localhost:3000/overview.html   
- express will first look for the route you type into the url. if it cant find it, it will then look for the file in the foler we define in this function

Environment Variables & config files
- run this in the terminal: 
  NODE_ENV=development npm start in the git bash
  we manually set a environmetn variable NODE_ENV here from the command line. not permanent. You can set any variable like X = 32
- you can use these to set a database if you use different db for production or development, or you can set NODE_ENV to production or development
- env is the environment global variable that are used to define the environment a app is running. this is set by express, but node.js can set othe env variables look at process.env
- console.log(app.get('env')); 
  console.log(process.env); // this will list all the global env variables available. 
- use a configuration.env file to set envir vars if you need to do it multiple times. 
  - to use a config file, install a package called dotenv. its a package to use config files for setting environment vars
    const dotenv = require('dotenv'); 
    dotenv.config({ path: './config.env' }); // our config.env gets accessed here and the vars are loaded into process.env
    process.env.PORT // this is how you access the env vars if you are using the dotenv package from npm
- we changed our startup scripts to accomodate a dev and a production environment
  {
    "start:dev": "nodemon server",
    "start:prod": "NODE_ENV=production nodemon server.js" 
  }


STATUS codes
- 404 Page not found
- 400 Bad request
- 500 internal server error
- 200 Success
- 201 Created
- 204 No content
- JSEND specification: Used to send json. status and data properties
  res.status(200).json({
    status: 'success', // can either have success, fail, or error
    results: tours.length, // custom property
    requestedAt: req.requestTime, // custom property. we can do this to easily send some data back in the response
    data: { // enveloping the data 
      tours: tours, // in es6 you can just write tours if the key and the value are the same. You do need to make sure the property matches the endpoint name
    },
  })


ES lint
- scans code to find bad coding pratices or potential coding errors
- install extension eslint
  -  npm i eslint prettier eslint-config-prettier eslint-plugin-prettier eslint-config-airbnb eslint-plugin-node eslint-plugin-import eslint-plugin-jsx eslint-plugin-react --save-dev
  - extra pluggins are needed for the airbnb style guide to work
  - next make config files for both prettire and eslint