MONGO DB atlas 
info in config file

-crate a project in atlas, then create a cluster for the project
-a cluster is like an instance of our database

Connecting app to a database
- npm i mongoose
  require mongoose in the server.js file then pass in the connection string into mongoose
- mongoose.connect() returns a promise. so we can use the .then() mentod. when promise if fuffilled, con will be the resolved value of the promise
- the "use*" connect options are jsut for getting rid of some depreication warnings


Mongoose
- Mongoose is a layer of abstraction over mongodb just like express is a layer on top of node. a object data modeling librarey, like mongoose,  is a way for us to write js code to interact with a database.
- mongoose is all about moddles. which are like blueprints for creating documents. you can also crud documents with models. 
- to create a model you need a schema. 
  const tourSchema = new mongoose.Schema({  // pass in the schema as an object
  name: {
    type: String,     // these are schema options. pass in the properties as an object
    required: [true, 'A tour must have a name'],    // you can also pass in an error string in case the name is omitted. this line is callec a validator
  },
  rating: Number,
  price: {
    type: Number,
    required: true
  }
})

const Tour = mongoose.model('Tour', tourSchema);   /// use uppercase for any models or class names. 'Tour' is the model name

- Create a new document from our Tour Schema. like using a class constructor
const testTour = new Tour({   testTour is an instance of the Tour model
  name: 'The Mountain Hiker',
  rating: 4.7,
  price: 497,
});

testTour
  .save()  // to save a documetn to the db its as simple as runing this function. a collection will automatically be created if none exists for that model
  .then((doc) => {    .save() returns a promise. when fuffilled it returns the document we just saved to the db
    console.log(doc);
  })
  .catch((err) => {
    console.log('ERROR ', err);
  });


---
Writing to test json file
exports.createTour = (req, res) => {
  console.log(req.body);

  const newID = tours[tours.length - 1].id + 1;
  const id = { id: newID };
  const newTour = Object.assign(id, req.body); // this creates a new object by merging 2 existion objects together. do it like this to not mutate the origional body object.

  tours.push(newTour);

  fs.writeFile(
    `${__dirname}/dev-data/data/tours-simple.json`,
    JSON.stringify(tours),
    (err) => {
      if (err) return console.log('error writing file');
      res.status(201).json({
        status: 'success',
        data: {
          tour: newTour,
        },
      });
    }
  );
};

Check ID middleware
exports.checkID = (req, res, next, val) => {
  eslint-disable-next-line eqeqeq
  const tour = tours.find((el) => el.id == req.params.id);
  console.log(`tour id is ${val}`);
  if (!tour) {
    return res.status(404).json({
      status: 'fail',
      message: 'invalid ID',
    });
  }
  next();
};

VAlidate teh body
exports.checkTour = (req, res, next) => {
  const tour = req.body;

  const { price } = tour;
  if (!req.body.name || price == null) {
    return res.status(400).json({
      status: 'fail',
      message: 'Missing name or Price',
    });
  }

  next();
};


Creating a Tour
-  const newTours = new Tour({});  first creating a document and calling save on the document
   newTours.save();   the document has lots of methods we can use like save 

   using Tour.create({}) is calling the method directly on the tour schema. it also reurns a promise

Filtering data
- use the ? to alow the user to filter data.
  http://localhost:3000/api/v1/tours?duration=5&difficulty=easy
- req.query is how you get an object with all the query params 

There are multiple ways to use the db query

let query = Tour.find(JSON.parse(queryStr));    This creates a Query object so that we can chain multiple methods from teh Query class to it and then execute it later with await
                                                We use Tour.func() to access the Tour collection in  mongoDB
const tours = await Tour.find({   // returns an array of the documents
  duration: 5,
  difficulty: 'easy',
}); 

const tours = await Tour.find()
      .where('duration')
      .equals(5)
      .where('difficulty')
      .equals('easy');

We can do this sort of chaining because all those methods belong to the Query class and Toru.find() returns a query object

Spread syntax Destructuring
- In js, if you say const var1 = obj1 then var1 will just point to obj1 and will not create a hard copy of the obj. so if you modify var1, you will also modify obj1. 
  use destructuring to get a copy of the obj. 

  const queryObj = {...req.query}  // will pull out all the remaing individual properties in the obj. pass all key:value pairs from an object

  As soon as you await the query (using await Tour.find()) the query will execute and will come back with the documents. So, it we do it like that, you wont be able to implement paging or sorting
  or other features. instead, you you have to save teh Tour.find() into a Query obj into a variable, then run whatever query methods on that obj, and only at the end you await the query. 
- What we are trying to do in getAllTours is to create a Query obj so that we keep chaining extra methods to it. 

Greater than or equal to. advanced filtering
- http://localhost:3000/api/v1/tours?duration[gte]=5&difficulty=easy
- queryStr.replace(/(gte|gt|lte|lt)\b/g) use the | for or. \b is to say only match these exact phrases, so it wont match a word with lte in it. teh g mean it will run teh regex multiple times

Field Limiting
- http://localhost:3000/api/v1/tours?fields=name,duration,difficulty,price
- use field limiting to reduce bandwith of requests
- use select operation. using select is called projecting
- the default of select -__v is because we want to at least not include the __v property which mongoose auto adds since it is used internally
- you can hide fields from the client permanently including the select: false property in the schema field you want to hide

Pagination
- if you want page 5 and each page is 10 items (the limit field), you skip the first 50 items and start quering the db
- const limit = req.query.limit * 1 || 100    js feature to set default vals

Ailasing
- if there is a request that is used often, you can make an ailias for that route thats easy for the user to memorize
- We minipulate the query object by using middleware functions to prefill the fields in the url
  First the request goes through the /top-5-cheap route and then the aliasTopTours middleware gets executed. after teh fields are set in teh middleware, the getAllTours func 
  gets run with all the params already set. 

Features class
- we refactored the code so that all the api features are in their own class.
- we need to return this at the end of each method so that we are able to chain mehtod after method. This is the object itself, which has access to all its own methods
- we create a new object of the apifeatures class. we pass in the query object, and the query string that come from express. 

Mongodb agreggation pipeline
- a pipeline is a process where all the documents from a certian collectyion go through where they are processed step by step in ordert to transform them into aggregated resultys
  use to calc averages, min, max distances etc.
- pass in an array of stages that will get exe one at a time in order

  const stats = await Tour.aggregate([   // returns an aggregate object
      {
        $match: { ratingsAverage: { $gte: 4.5 } },    // filters out certian documents. just like a query. usually just a preliminart stage to prepare for other stages
      },
      {
        $group: {
          _id: null,    // this is the field we want to group by. since we wants stats on all the docs we leave it null
          avgRating: { $avg: '$ratingsAverage' },  //$avg and ttc are all mongodb operators. you need to use '$fieldName' just because its what aggregation pipline works
          avgPrice: { $avg: '$price' },
          minPrice: { $min: '$price' },
          maxPrice: { $max: '$price' },
        },
      },
      {
        $sort: { avgPrice: 1 },  // the documets that get passedinto here are the ones that result from being processed in teh above stage. so all teh field names we used above have to be used here
      },
    ]);
- you are also allowed to repeat stages
- $Unwind. will create a copy of the document for each element in fiels's value.
  for the start dates, there are 3 in a array, so it will copy each tour documet 3 times each with only one of the start dates

- to group by the month use a aggregation pipeline operator $month: field (that you want to extract the date from)
- we use $push to create an array of all the names of the tours that are grouped together. 
- use $project: to prevent sending a field to tue user that they dont need 
- use $addField because we expect to have another field named _id in the future?

Virtual properties
- properties you can add to a document that wont get saved to the db. good for things like kilometers, when you already have miles saved in the db. wont persist in the db but 
  will be there when you get the data

  tourSchema.virtual('durationWeeks').get(function () {
    return this.duration / 7;
});

you have to use a reg function because you need access to the this keyword. arrow funcs dont have that. .this points to teh current document
to get it to show up in the results, you have to add an options object into the schema definition
{
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
  }
);

Mongoose Middleware
- Middleware funcs that run in response to a certian event like a doc being added to the db.
- A hook is the event we are listening to. the 'save' in our function below. we call the fune a 'pre save hook' or pre save middleware

- Document middleware.  Gives you access to the document that is being processed right before it is saved to the db
  tourSchema.pre('save', function () {  // this one runs before the .save() and .create(). does not run on insertMany()
    console.log(this);
  });
  
  tourSchema.pre('save', function (next) { // can have multiple pre middlewares for the same hook
    console.log('Will Save document...');
    next();
  });

  tourSchema.post('save', function (doc, next) {  // has access to the doc that was just saved to the db ('doc'). post middlewares are exe after all teh pre middleware has completed
    console.log(doc); // you dont have this anymore, but you do have the 'doc'
    next();  // no longer needed, but is best pratice to always include it
  });

- Query Middleware: executes before any find query is exe
  tourSchema.pre('find', function (next) {  // the this keyword will point at the current query and not the document for these
    next();
  });

  tourSchema.post(/^find/, function (docs, next) {    // in post middleware you get access to all the 'docs' returned by the query. this middleware runs after teh query was already executed
    console.log(`Query took ${Date.now() - this.start} millisec`);
    console.log(docs);
    next();
  });

- Aggregate middleware
  What we are doing in this func is appending a group to the pipeline right in the beginning to omit the secret tours. doing this at the model level
  we can just add another $match stage to the beginning of the pipeline array.

    tourSchema.pre('aggregate', function (next) { runs before any aggregation pipeline
    this.pipeline().unshift({ $match: { secretTour: { $ne: true } } });  // unshift adds an element to the front of an array. 
    
    console.log(this.pipeline()); // shows the array of stages of teh pipeline
    next();
  });

- Data validation
  Checks whether the data given is in the right format for the document schema, and that values are entered for the required fields.
  Sanitation. makes sure there is no milicous code being entered into the database. remove unwanted characters. never accept data coming from a user as it is

  required: [true, 'A tour must have a name'],  this is a type of validator
  maxlength: [40, 'A tour name must have less or equal to 40 chars'],
  minlength: [10, 'A tour name must have at least 10 characters'],      these validators are only available for strings
  enum validator works for strings
  min and max validators for numbers and dates

  - Custom Validators. these return true or false
      priceDiscount: {
          type: Number,
          validate: {
            validator: function (val) {  // func has access to the value that was passed in
              return val < this.price;
            },
            message:
              'Discount price ({VALUE}) should be less than the regular price',    /// message has access to the value as well. its just internal to mongoose
          },
        },
  It turns out that this validator wont work on a update because the .this keyword only applies to NEW Document createion
  Can also use a library called validator
    const validator = require('validator');
    validate: [validator.isAlpha, 'Tour name must only contain letters'],
